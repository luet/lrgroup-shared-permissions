#! /bin/bash
# Usage:
# cp-lrgroup [cp options] SRC DEST
# TODO:
#   - test with cp-laure *.pdf pdf-dir
#   - Do I really need the "-R"? Because if it's a directory, the user
#     should specify it on their side. Maybe I should test of it?
#     Initially, I didn't pass the command line parameters to the command line.
# set -x

help()
{
    cat << EOF
usage: cp-lrgroup [ -s | --source ]
       [ -d | --destination ]
       [ -r | --remove-source ]
       [ -h | --help ]

where:
  -s: specifies the source. This can be a directory, a list of files,
   or a pattern (e.g. "*.nc").
  -d: specifies the destination directory.
  -r: specifying "-r" will remove the files and directories that have
   been transferred. The default (without specifying "-r") is to leave
   the source files in place.

The purpose of this script is to transfer files and directories to a
shared directory and to automatically set the permissions so that
members of the group:
- can read existing files, but not delete or overwrite them,
- can create new files in the directories and sub-directories that
  have been transferred.

This script uses rsync to copy the data and uses the same
syntax. Specifically, be aware of trailing slashes (/) in
the name of a source directory. For instance:
   cp-lrgroup source-dir /projects/GEOCLIM/LRGROUP/
will copy the directory source-dir resulting in the directory
   /projects/GEOCLIM/LRGROUP/source-dir
but (note the trailing /)
   cp-lrgroup source-dir/ /projects/GEOCLIM/LRGROUP/
will copy the *content* of the directory source-dir
in /projects/GEOCLIM/LRGROUP/.

examples:
- copy the directory mydir in the directory /projects/GEOCLIM/LRGROUP/
    cp-lrgroup mydir /projects/GEOCLIM/LRGROUP/
- copy "*.nc" in in the directory /projects/GEOCLIM/LRGROUP/all-my-nc
    cp-lrgroup *.nc /projects/GEOCLIM/LRGROUP/all-my-nc

This script uses rsync to copy the source to the destination. rsync
does not delete the source directory. You will be prompted to delete
it at the end of this script.

EOF
exit 2
}


# set default
action="rsync"
source="xnosourcex"
destination="xnodestinationx"
remove=1
RSYNC="rsync -avu"

TEMP=`getopt -o hs:d:r \
	      -l help,source:,destination:,remove-source \
	      -n 'cp-lrgroup' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
  	-s|--source)
	    source=$2; echo "source: $source" ; shift 2 ;;
  	-d|--destination)
  	    destination=$2 ; echo "destination: $destination"; shift 2;;
  	-r|--remove-source)
  	    remove=0 ; echo "remove: $remove"; shift;;
	-h | --help) help ;;	
  	--) shift ; break ;;
  	*) echo "Internal error!" ; exit 1 ;;
    esac
done
  
# Now take action
echo $RSYNC "${source}" "${destination}"

(($? != 0)) && { printf '%s\n' "rsync command ended with non-zero status"; exit 1; }

if [ $remove -eq 0 ]
then
    echo removing source files and directories
else
    echo leaving files and directories in place
fi

exit 1

# change permissions
for s in "${SRC}"
do
    echo $s
    if [ -d "${DEST}"/$s ]
    then
	chmod -R g=rX "${DEST}"/"${SRC}"
	# set the permissions so that group members can create
	# new files in the directory but not delete or overwrite
	# existing files
	find "${DEST}"/"${SRC}" -type d -exec chmod g+w {} \;
    else
	chmod g=rX "${DEST}"/"${SRC}"
    fi
done
