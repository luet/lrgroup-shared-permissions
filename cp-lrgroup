#! /bin/bash
# Usage:
# cp-lrgroup [cp options] SRC DEST
# TODO:
#   - test with cp-laure *.pdf pdf-dir
#   - Do I really need the "-R"? Because if it's a directory, the user
#     should specify it on their side. Maybe I should test of it?
#     Initially, I didn't pass the command line parameters to the command line.
# set -x

# set default
source_dir="."
action="cp"

TEMP=`getopt -o f:s:d:a: \
	      --long file-name:,source:,destination:,action: \
	      -n 'cp-lrgroup' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
  	-f|--file-name)
  	    file_name=$2 ; echo "file_name: $file_name"; shift 2 ;;
  	-s|--source)
	    source_dir=$2; echo "source_dir: $source_dir" ; shift 2 ;;
  	-d|--destination)
  	    destination_dir=$2 ; echo "destination_dir: $destination_dir"; shift 2;;
  	-a|--action)
  	    case "$2" in
  		"cp"|"mv") action=$2 ; echo "action: $action"; shift 2 ;;
  		*) echo "action $2 unknown"; shift ;exit 1 ;;
  	    esac ;;
  	--) shift ; break ;;
  	*) echo "Internal error!" ; exit 1 ;;
    esac
done
  
# Now take action
echo "$action file $file_name from $source_dir to $destination_dir"

exit 1
      


DEST="${*: -1:1}"
SRC="${*/$DEST}"

echo array:
for a in ${*}
do
    echo \#$a\#
done

echo DEST: \#"${DEST}"\#
echo SRC: \#"${SRC}"\#

# copy
echo command executed:
echo cp -R "${*}"
cp -R "${SRC}" "${DEST}"

# change permissions
for s in "${SRC}"
do
    echo $s
    if [ -d "${DEST}"/$s ]
    then
	chmod -R g=rX "${DEST}"/"${SRC}"
	# set the permissions so that group members can create
	# new files in the directory but not delete or overwrite
	# existing files
	find "${DEST}"/"${SRC}" -type d -exec chmod g+w {} \;
    else
	chmod g=rX "${DEST}"/"${SRC}"
    fi
done
